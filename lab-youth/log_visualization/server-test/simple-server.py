#!/usr/bin/env python
# -*- coding:utf-8 -*-

import argparse
import json
import sys
import pathlib
import urllib

from http.server import BaseHTTPRequestHandler, HTTPServer
from http import HTTPStatus

DATA_JSON='data.json'
ERR_JSON={'status':'none'}

def loadJson(file):
	try:
		with open(file, mode='r', encoding='utf-8') as f:
			text = f.read()
			return json.loads(text)
	except:
		return {}

def saveJson(file, js):
	with open(file, mode='w', encoding='utf-8') as f:
		text = f.write(json.dumps(js))

def getContentType(suffix):
	tbl = {
		'js' : 'text/javascript',
		'html' : 'text/html',
	}
	return tbl.get(suffix[1:], 'text/plain')

def returnFile(self, path):
	contentType = getContentType(path.suffix)
	print('returnFile name=%s contentType=%s' % (path.name, contentType))
	try:
		with open(path.name, mode='r', encoding='utf-8') as f:
			text = f.read()
	except:
		text = 'open err'

	self.send_response(200)
	self.send_header('Content-type', '%s; charset=utf-8' % contentType)
	self.send_header('Content-Length', str(len(text)))
	self.end_headers()
	self.wfile.write(text.encode('utf-8'))

def returnJson(self, res):
	self.send_response(200)
	self.send_header('Content-type', 'application/json')
	self.end_headers()
	text = json.dumps(res)
	self.wfile.write(text.encode('utf-8'))

class MyHandler(BaseHTTPRequestHandler):
	def do_GET(self):
		pr = urllib.parse.urlparse(self.path)
		if pr.query:
			qs = urllib.parse.parse_qs(pr.query)
			key = qs.get('get', [''])[0]
			if key:
				js = loadJson(DATA_JSON)
				returnJson(self, js.get(key, {}))
			else:
				returnJson(self, {})
		else:
			path = pathlib.Path(pr.path)
			returnFile(self, path)

	def do_POST(self):
		pr = urllib.parse.urlparse(self.path)
		print('PR', pr)
		content_len=int(self.headers.get('content-length'))
		text = self.rfile.read(content_len)
		print('TEXT', text)
		inJson = json.loads(text.decode('utf-8'))
		op = pr.path[1:]
		js = {}

		if op == 'get_pos':
			# ここにデータを入れる
			js = {"pos":[[8.0, 38.0], [46.0, 105.0], [20.0, 77.0], [21.0333, 105.85], [47.9167, 106.9167], [19.8833, 75.3333], [13.75, 100.4667], [30.3229, 78.0317], [-6.9039, 107.6186], [-6.1744, 106.8294], [-6.1744, 106.8294], [13.7, 100.4667], [16.0678, 108.2208], [28.6, 77.2], [10.95, 106.8167], [16.0678, 108.2208], [39.9289, 116.3883], [33.9777, -118.4351], [37.0645, -113.5746], [37.3934, -120.8945], [42.2027, -71.6813], [40.61, -73.9108], [33.5242, -82.0926], [40.7694, -73.9609], [30.6667, 104.0667], [31.4888, 74.3686], [-7.6064, 110.6794], [48.8582, 2.3387000000000002], [47.6145, -122.348], [47.6145, -122.348], [47.6145, -122.348], [47.6145, -122.348], [50.1153, 8.6823], [50.1153, 8.6823], [51.5142, -0.0931], [42.0166, -71.2231], [50.1153, 8.6823], [40.7904, -74.0246], [34.0408, -84.1665], [60.1756, 24.9342], [30.1438, -81.5401], [28.6667, 77.2167], [-22.9095, -47.0674], [36.0986, 120.3719], [39.9289, 116.3883], [52.3529, 4.9415], [42.8864, -78.8781], [53.3472, -6.2439], [29.9668, -95.3454], [37.3387, -121.8914], [47.0188, 28.8128], [50.1153, 8.6823], [52.3529, 4.9415], [40.7584, -73.9794], [41.078, -74.1764], [39.3555, -76.6355], [37.3501, -121.9854], [16.0678, 108.2208], [16.0678, 108.2208], [28.6667, 77.2167], [51.5142, -0.0931], [52.3529, 4.9415], [51.2993, 9.491], [51.2993, 9.491], [30.1438, -81.5401], [55.7386, 37.6068], [39.9289, 116.3883], [-12.0433, -77.0283], [35.69, 139.69], [22.4333, 114.0333], [35.685, 139.7514], [38.5333, -8.9], [48.8582, 2.3387000000000002], [45.7363, 4.8687000000000005], [40.6236, -111.9871], [44.4891, -88.8868], [37.751, -97.822], [37.2911, 127.0089], [5.6167, -0.0167], [36.6683, 116.9972], [37.5261, 126.9031], [52.2394, 21.0362], [-20.8762, -48.3148], [-23.5733, -46.6417], [51.2993, 9.491], [53.3472, -6.2439], [52.3824, 4.8995], [58.6667, 17.1], [21.0333, 105.85], [10.95, 106.8167], [39.8331, -86.1747], [37.5985, 126.9783], [36.6776, 126.8427], [10.8142, 106.6438], [37.5985, 126.9783], [26.5167, 88.7333], [32.0617, 118.7778], [-22.8305, -43.2192], [52.2394, 21.0362], [52.2394, 21.0362], [53.3472, -6.2439], [39.9289, 116.3883], [28.1792, 113.1136], [39.9289, 116.3883]],
				"count":[3,7]}
		elif op == 'get_pos2':
			js= {"pos":[[-34.6033, -58.3817], [21.0333, 105.85], [44.0633, 12.5808], [9.9833, 76.2833], [20.0, 77.0], [21.0333, 105.85], [23.7701, 90.3628], [15.8858, 108.2569], [10.7725, 76.6514], [21.0333, 105.85], [-34.6033, -58.3816], [21.0333, 105.85], [21.0333, 105.85], [16.9333, 82.2167], [20.0, 77.0], [33.5928, -7.6192], [-6.2349, 106.9896], [41.0, 64.0], [7.0167, 100.6619], [47.8, 22.8833], [3.1698, 101.706], [53.9, 27.5667], [24.6537, 46.7152], [15.0, 30.0], [20.0, 77.0], [42.9394, -78.8438], [41.1737, -73.1365], [40.0266, -75.3333], [39.4914, -119.8435], [32.3816, -86.2813], [33.7009, -97.1629], [20.0, 77.0], [40.959, -74.1562], [30.7343, 76.7933], [42.8864, -78.8781], [45.4667, 9.2], [48.8582, 2.3387000000000002], [37.751, -97.822], [41.0, 20.0], [31.0456, 121.3997], [43.7334, -79.3329], [37.419200000000004, -122.0574], [52.3529, 4.9415], [51.5142, -0.0931], [55.7386, 37.6068], [40.8326, -74.1307], [47.9877, 39.9398], [16.0678, 108.2208], [37.3387, -121.8914], [48.8582, 2.3387000000000002], [37.751, -97.822], [10.8142, 106.6438], [39.7157, -75.5281], [40.7904, -74.0246], [29.5822, -95.7608], [42.2318, -71.3744], [43.3445, 5.38], [47.1667, 27.6], [43.6109, 3.8772], [48.7649, 1.9292], [48.6957, 2.1873], [43.6319, -79.3716], [23.0333, 72.6167], [56.8833, 14.8167], [-12.5, 18.5], [49.5937, 34.5407], [52.1667, 5.2812], [35.685, 139.7514], [30.0355, 31.223], [30.0771, 31.2859], [52.2394, 21.0362], [48.6667, 10.8667], [-20.636, -48.1889], [-23.5733, -46.6417], [48.1134, 11.6466], [50.45, 30.5233], [17.3753, 78.4744], [50.6667, 3.0833], [21.0333, 105.85], [42.0166, -71.2231], [33.69, 73.0551], [10.8142, 106.6438], [16.0678, 108.2208], [28.4604, 119.9103], [33.6119, -111.8906], [-22.8305, -43.2192], [-22.8305, -43.2192], [52.2394, 21.0362], [52.2394, 21.0362], [52.2394, 21.0362], [52.2394, 21.0362], [-33.45, -70.6667], [53.3472, -6.2439], [10.95, 106.8167], [50.1153, 8.6823], [10.8142, 106.6438], [10.8142, 106.6438], [10.8142, 106.6438], [34.7725, 113.7266]],
			"count":[1,35]}

		self.send_response(200)
		self.send_header('Content-type', 'application/json')
		self.end_headers()
		self.wfile.write(json.dumps(js).encode('utf-8'))

def main():
	server = HTTPServer(('localhost', 8000), MyHandler)
	server.serve_forever()

if __name__ == '__main__':
	main()
